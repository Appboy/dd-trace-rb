stages:
  - package
  - deploy
  - macrobenchmarks
  - microbenchmarks

include:
  - remote: https://gitlab-templates.ddbuild.io/apm/packaging.yml
  - local: ".gitlab/benchmarks.yml"

# -----------------------------------------------------
# Reliability Environment configuration
# -----------------------------------------------------

variables:
  RUBY_PACKAGE_VERSION:
    description: "The version of the gem to build the rpm/deb package"
  DOWNSTREAM_BRANCH:
    value: "master"
    description: "Run a specific datadog-reliability-env branch downstream"

default:
  tags: [ "runner:main", "size:large" ]

install-base-ruby-gems:
  image: registry.ddbuild.io/images/mirror/ruby:3.2.2
  stage: package
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  script:
    - .gitlab/install-gem-to-folder.sh
  artifacts:
    paths:
      - vendor

install-version-dependant-gems:
  image: registry.ddbuild.io/images/mirror/ruby:$RUBY_VERSION
  parallel:
    matrix:
      - RUBY_VERSION: [ "3.0.0", "3.1.2-slim"]
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  stage: package
  needs: [ "install-base-ruby-gems" ]
  script:
    - .gitlab/install-gem-to-folder-version-specific.sh
  artifacts:
    paths:
      - vendor

package:
  extends: .package
  needs: ["install-version-dependant-gems", "install-base-ruby-gems"]
  rules:
    - if: $RUBY_PACKAGE_VERSION
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  script:
    - ls ../vendor
    - ../.gitlab/build-deb-rpm.sh

.release-package:
  stage: deploy

deploy_to_reliability_env:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/apm-reliability/datadog-reliability-env
    branch: $DOWNSTREAM_BRANCH
  variables:
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA

deploy_to_docker_registries:
  stage: deploy
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: delayed
      start_in: 1 day
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: ghcr.io/datadog/dd-trace-rb/dd-lib-ruby-init:$CI_COMMIT_TAG
    IMG_DESTINATIONS: dd-lib-ruby-init:$CI_COMMIT_TAG
    IMG_SIGNING: "false"

deploy_latest_tag_to_docker_registries:
  stage: deploy
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: delayed
      start_in: 1 day
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: ghcr.io/datadog/dd-trace-rb/dd-lib-ruby-init:$CI_COMMIT_TAG
    IMG_DESTINATIONS: dd-lib-ruby-init:latest
    IMG_SIGNING: "false"
