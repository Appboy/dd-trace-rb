module Datadog
  module AppSec
    # Processor integrates libddwaf into datadog/appsec
    class Processor
      # Interface object to check using case .. when
      module IOLike
        def read: () -> nil

        def rewind: () -> nil

        def self.===: (untyped other) -> untyped
      end

      # Context manages a sequence of runs
      class Context
        attr_reader time_ns: untyped

        attr_reader time_ext_ns: untyped

        attr_reader timeouts: untyped

        attr_reader events: untyped

        def initialize: (untyped processor) -> void

        def run: (*untyped args) -> untyped

        def finalize: () -> untyped
      end

      attr_reader ruleset_info: untyped

      attr_reader addresses: untyped

      def initialize: () -> void

      def ready?: () -> untyped

      def new_context: () -> untyped

      def update_rule_data: (untyped data) -> untyped

      def toggle_rules: (untyped map) -> untyped

      def update_ip_denylist: (?untyped denylist, ?id: ::String) -> untyped

      def finalize: () -> untyped

      attr_reader handle: untyped

      private

      def load_libddwaf: () -> untyped

      def load_ruleset: () -> untyped

      def create_waf_handle: () -> untyped

      # check whether libddwaf is required *and* able to provide the needed feature
      def self.libddwaf_provides_waf?: () -> (true | false)

      # libddwaf raises a LoadError on unsupported platforms; it may at some
      # point succeed in being required yet not provide a specific needed feature.
      def self.require_libddwaf: () -> untyped

      def self.libddwaf_spec: () -> untyped

      def self.libddwaf_platform: () -> (untyped | "unknown")

      def self.ruby_platforms: () -> untyped
    end
  end
end
