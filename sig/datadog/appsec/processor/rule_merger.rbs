module Datadog
  module AppSec
    class Processor
      module RuleMerger
        type rules = ::Hash[::String, untyped]
        type data = ::Hash[::String, untyped]
        type overrides = ::Hash[::String, untyped]

        def self.merge: (rules: untyped, ?data: ::Array[data]?, ?overrides: ::Array[overrides]?) -> rules

        private

        def self.combine_data: (::Array[data] data) -> (nil | { rules_data: untyped })

        def self.merge_data_base_on_expiration: (::Array[data] data1, ::Array[data] data2) -> ::Array[data]

        def self.combine_overrides: (::Array[overrides] overrides) -> overrides?
      end
    end
  end
end
